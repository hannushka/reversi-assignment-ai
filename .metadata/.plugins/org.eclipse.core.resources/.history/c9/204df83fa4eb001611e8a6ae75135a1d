package reversiassignment;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import reversiassignment.Board.Cellstate;

public class MiniMax {
	private Cellstate currentPlayer;
	private Helper helper;
	private GameState root;
	
	public MiniMax(Board b, Cellstate c, Helper h) {
		currentPlayer = c;
		helper = h;
		root = new GameState(b, b.getScore(c));
		generateChildren(root);
	}
	
	private void generateChildren(GameState parent) {
		Set<Position> adjs = parent.board.getAdjs();
		Board newBoard;
		GameState child;
		for (Position p : adjs) {
			newBoard = new Board(parent.board.getBoard(), parent.board.getAdjs());
			newBoard.placeMarker(p, currentPlayer);
			newBoard.flipMarkers(helper.evaluateMove(p, currentPlayer, newBoard), currentPlayer);
			child = new GameState(newBoard, newBoard.getScore(currentPlayer));
			parent.addChild(child);
			if (!child.isGameOver) {
				generateChildren(child);
			}
		}
	}	
	
	public Position minDecision() {	
		/*Board board = root.board;
		Iterator<Position> itr1 = board.getAdjs().iterator();
		Set<Position> flips;
		Position p;
		do {
			p = itr1.next();
			flips = helper.evaluateMove(p, currentPlayer, board);
		} while (flips.isEmpty() && itr1.hasNext());
		return p;*/
		int maxScore = 0;
		for (GameState child : root.children) {
			
		}
	}
	
	public Position maxDecision() {
		return null;
	}
	
}
