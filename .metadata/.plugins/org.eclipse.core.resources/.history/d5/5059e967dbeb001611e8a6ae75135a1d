package reversiassignment;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import reversiassignment.Board.Cellstate;

public class MiniMax {
	private Helper helper;

	public MiniMax(Helper h) {
		helper = h;
	}

	private int getScore(Board board) {
		int score = 0;
		Cellstate[][] b = board.getBoard();
		for (int i = 0; i < Board.SIZE; i++) {
			for (int j = 0; j < Board.SIZE; i++) {
				if (b[i][j] == Cellstate.BLACK)
					score++;
				else if (b[i][j] == Cellstate.WHITE)
					score--;
			}
		}
		return score;
	}

	public Position MiniMax(Board b, Cellstate currPlayer) {
		Set<Position> possibleMoves = b.getAdjs();
		int max = Integer.MIN_VALUE;
		GameNode maxNode;
		GameNode tmp;
		for (Position p : possibleMoves) {
			Set<Position> flips = helper.evaluateMove(p, currPlayer, b);
			if (!flips.isEmpty()) {
				Board newBoard = new Board(b.getBoard(), possibleMoves);
				newBoard.placeMarker(p, currPlayer);
				newBoard.flipMarkers(flips, currPlayer);
				tmp = new GameNode(newBoard, p, currPlayer);
				int score = maxDecision(tmp);
				if (score > max) {
					max = score;
					maxNode = tmp;
				}
			}
		}
	}

	public int maxDecision(GameNode node) {

	}

}
