package reversiassignment;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import reversiassignment.Board.Cellstate;

public class MiniMax {
	private Cellstate currentPlayer;
	private Helper helper;
	private GameState root;

	public MiniMax(Board b, Cellstate c, Helper h) {
		currentPlayer = c;
		helper = h;
		root = new GameState(b, b.getScore(c), null);
	}

	private void traverseTree(GameState parent) {
		Set<Position> adjs = parent.board.getAdjs();
		for (Position p : adjs) {
			System.out.println("Generating children for " + p.toString());
			Board newBoard = new Board(parent.board.getBoard(), parent.board.getAdjs());
			newBoard.placeMarker(p, currentPlayer);
			newBoard.flipMarkers(helper.evaluateMove(p, currentPlayer, newBoard), currentPlayer);
			
			//alpgabeta
			//Initially alpha is negative infinity and beta is positive 
			//infinity, i.e. both players start with their lowest possible
			//score.
			GameState child = new GameState(newBoard, alphabeta(root, 10, Integer.MIN_VALUE, Integer.MAX_VALUE, true), p);
			parent.addChild(child);
		}
	}

	private int alphabeta(GameState node, int depth, int alpha, int beta, boolean maximizing) {
		if (depth == 0 || node.board.gameOver())
			return node.score;
		if (maximizing) {
			int value = Integer.MIN_VALUE;
			for (GameState child : node.children) {
				value = Math.max(value, alphabeta(child, depth-1, alpha, beta, false));
				alpha = Math.max(alpha, value);
				if (beta <= alpha)
					break;
			}
		} else {
			
		}
		return
	}

	public Position maxDecision() {

		Board board = root.board;
		Iterator<Position> itr1 = board.getAdjs().iterator();
		Set<Position> flips;
		Position p;
		do {
			p = itr1.next();
			flips = helper.evaluateMove(p, currentPlayer, board);
		} while (flips.isEmpty() && itr1.hasNext());
		return p;
	}
}
