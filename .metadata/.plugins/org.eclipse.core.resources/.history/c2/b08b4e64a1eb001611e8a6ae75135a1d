package reversiassignment;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import reversiassignment.Board.Cellstate;

public class MiniMax {
	private Board board;
	private Cellstate color;
	private Helper helper;
	private GameState root;
	
	public MiniMax(Board b, Cellstate c, Helper h) {
		board = b;
		color = c;
		helper = h;
		root = new GameState(b, 0);
		generateChildren();
	}
	
	private void generateChildren() {
		List<GameState> children = new LinkedList<GameState>();
		Set<Position> adjs = board.getAdjs();
		Board b;
		for (Position p : adjs) {
			b = new Board(board.getBoard(), board.getAdjs());
			b.placeMarker(p, color);
			board.flipMarkers(helper.evaluateMove(p, color, board), color);		
		}
	}
	
	/**
	// Player is choosing position for next move
	Iterator<Position> itr1 = board.getAdjs().iterator();
	Set<Position> flips;
	Position p;
	do {
		p = itr1.next();
		flips = helper.evaluateMove(p, color, board);
	} while (flips.isEmpty() && itr1.hasNext());
	
	
	// Placing and flipping
	if (!flips.isEmpty()) {
		System.out.println("Player " + color + " placed marker at " + p.toString());
		board.placeMarker(p, color);
		board.flipMarkers(flips, color);
	}
	return flips.size();*/
	
	
	public Position minDecision() {		
		Iterator<Position> itr1 = board.getAdjs().iterator();
		Set<Position> flips;
		Position p;
		do {
			p = itr1.next();
			flips = helper.evaluateMove(p, color, board);
		} while (flips.isEmpty() && itr1.hasNext());
		return p;
	}
	
	public Position maxDecision() {
		return null;
	}
	
}
