package reversiassignment;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import reversiassignment.Board.Cellstate;

public class PlayerAI implements Player {
	private Cellstate color;
	private Board board;
	private Helper helper;
	private MiniMax mm;

	public PlayerAI(Cellstate c, Board b, Helper h) {
		this.color = c;
		board = b;
		helper = h;
		mm = new MiniMax(h);
	}

	public void playerMove() {
		Set<Position> possibleMoves = board.getAdjs();
		int maxValue = Integer.MIN_VALUE;
		Position p;
		for (Position pos : possibleMoves) {
			Set<Position> flips = helper.evaluateMove(pos, color, board);
			if (!flips.isEmpty()) {
				Board newBoard = new Board(board.getBoard(), possibleMoves);
				newBoard.placeMarker(pos, color);
				newBoard.flipMarkers(flips, color);
				int tmp = maxDecision(new GameNode(newBoard, pos)));
				if (tmp > maxValue) {
					maxValue = tmp;
					p = pos;
				}
			}
		}


		Set<Position> flips = helper.evaluateMove(p, color, board);
		// Placing and flipping
		if (!flips.isEmpty()) {
			System.out.println("Player " + color + " placed marker at " + p.toString());
			board.placeMarker(p, color);
			board.flipMarkers(flips, color);
		}
	}

	public Cellstate getColor() {
		return color;
	}

}
