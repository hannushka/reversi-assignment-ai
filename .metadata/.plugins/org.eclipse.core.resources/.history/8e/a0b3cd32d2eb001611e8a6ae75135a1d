package reversiassignment;

import java.util.Set;

import reversiassignment.Board.Cellstate;

public class MiniMax {
	private Helper helper;
	private Cellstate maximisingPlayer;
	private Cellstate minimisingPlayer;
	
	public MiniMax(Helper h, Cellstate m) {
		helper = h;
		maximisingPlayer = Cellstate.BLACK;
		minimisingPlayer = Cellstate.WHITE;
	}
	
	private int getScore(Board board) {
		int score = 0;
		Cellstate[][] b = board.getBoard();
		for (int i = 0 ; i < Board.SIZE ; i++) {
			for (int j = 0 ; j < Board.SIZE ; i++) {
				if (b[i][j] == maximisingPlayer)
					score++;
				else if(b[i][j] == minimisingPlayer)
					score--;
			}
		}
		return score;
	}

	public Position minimax(Board board, int depth, int bestScore, Position bestPosition, Cellstate currPlayer) {
		//if game is over return score
		if (board.gameOver() || depth == 0)
			return bestPosition;
		//Get possible positions
		Set<Position> pos = board.getAdjs();
		//generate children
		//recurse on children
		int score = Integer.MIN_VALUE;
		Set<Position> flips;
		for (Position p : pos) {
			Board newBoard = new Board(board.getBoard(), pos);
			flips = helper.evaluateMove(p, currPlayer, newBoard);
			if (!flips.isEmpty()) {
				newBoard.flipMarkers(flips, currPlayer);
				newBoard.placeMarker(p, currPlayer);
				//if returned value is better than score replace best score and best position
				score = getScore(newBoard);
				if ()
			}
		}
		return null;
	}
}
