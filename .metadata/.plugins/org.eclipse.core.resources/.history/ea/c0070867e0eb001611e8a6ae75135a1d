package reversiassignment;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import reversiassignment.Board.Cellstate;

public class PlayerAI implements Player {
	private Cellstate color;
	private Board board;
	private Helper helper;
	private MiniMax mm;

	public PlayerAI(Cellstate c, Board b, Helper h) {
		this.color = c;
		board = b;
		helper = h;
		mm = new MiniMax(h);
	}

	public void playerMove() {
		Map<Position, Integer> scores = new HashMap<Position, Integer>();
		Set<Position> possibleMoves = board.getAdjs();
		for (Position p2 : possibleMoves) {
			Set<Position> flips = helper.evaluateMove(p2, color, board);
			if (!flips.isEmpty()) {
				Board newBoard = new Board(board.getBoard(), possibleMoves);
				newBoard.placeMarker(p2, color);
				newBoard.flipMarkers(flips, color);
				scores.put(p2,mm.maxDecision(new GameNode(newBoard, p2)));
			}
		}
		int maxValue = Integer.MIN_VALUE;
		Position p = null;
		int tmp;
		for (Position p2 : scores.keySet()) {
			tmp = scores.get(p2);
			if (tmp > maxValue) {
				maxValue = tmp;
				p = p2;
			}
		}

		Set<Position> flips = helper.evaluateMove(p, color, board);
		// Placing and flipping
		if (!flips.isEmpty()) {
			System.out.println("Player " + color + " placed marker at " + p.toString());
			board.placeMarker(p, color);
			board.flipMarkers(flips, color);
		}
	}

	public Cellstate getColor() {
		return color;
	}

}
