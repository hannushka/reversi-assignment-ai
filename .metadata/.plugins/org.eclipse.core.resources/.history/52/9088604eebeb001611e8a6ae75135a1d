package reversiassignment;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import reversiassignment.Board.Cellstate;

public class PlayerAI implements Player {
	private Cellstate color;
	private Board board;
	private Helper helper;
	Map<Position, Integer> finalScores;

	public PlayerAI(Cellstate c, Board b, Helper h) {
		this.color = c;
		board = b;
		helper = h;
	}
	
	private int calcScore(Cellstate[][] board) {
		int score = 0;
		for (int i = 0 ; i < Board.SIZE ; i++) {
			for (int j = 0 ; j < Board.SIZE ; j++) {
				if (board[i][j] == color)
					score++;
				else if (board[i][j] != Cellstate.EMPTY)
					score--;
			}
		}
		return score;
	}
	
	private int miniMax(GameNode node) {
		Board nodeBoard = node.board;
		if (nodeBoard.gameOver())
			return calcScore(nodeBoard.getBoard());
		Set<Position> possibleMoves = nodeBoard.getAdjs();
		Set<Position> flips;
		for (Position p : possibleMoves) {
			flips = helper.evaluateMove(p, node.playerTurn, node.board);
			if (!flips.isEmpty()) {
				Board newBoard = new Board(nodeBoard.getBoard(), possibleMoves);
				newBoard.placeMarker(p, node.playerTurn);
				newBoard.flipMarkers(flips, node.playerTurn);
				Cellstate playerTurn;
				if (node.playerTurn == Cellstate.WHITE)
					playerTurn = Cellstate.BLACK;
				else
					playerTurn = Cellstate.WHITE;
				node.scores.put(p, miniMax(new GameNode(newBoard, playerTurn)));
			}
		}
		
	
		if (node.playerTurn == color) { //MAX
			
		} else {
			
		}
	}

	public void playerMove() {
		scores = new HashMap<Position, Integer>();
		Position p = null;
		
		Set<Position> flips = helper.evaluateMove(p, color, board);
		// Placing and flipping
		if (!flips.isEmpty()) {
			System.out.println("Player " + color + " placed marker at " + p.toString());
			board.placeMarker(p, color);
			board.flipMarkers(flips, color);
		}
	}

	public Cellstate getColor() {
		return color;
	}

}
